{"id":"ay75","dependencies":[{"name":"/Users/thuha/near_bid/package.json","includedInParent":true,"mtime":1693556262441},{"name":"/Users/thuha/near_bid/node_modules/protobufjs/package.json","includedInParent":true,"mtime":1693552851792},{"name":"./rpc/service","loc":{"line":36,"column":22,"index":1186},"parent":"/Users/thuha/near_bid/node_modules/protobufjs/src/rpc.js","resolved":"/Users/thuha/near_bid/node_modules/protobufjs/src/rpc/service.js"}],"generated":{"js":"\"use strict\";var e=exports;e.Service=require(\"./rpc/service\");"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/protobufjs/src/rpc.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/protobufjs/src/rpc.js","original":{"line":7,"column":0},"generated":{"line":1,"column":13}},{"source":"../node_modules/protobufjs/src/rpc.js","original":{"line":7,"column":0},"generated":{"line":1,"column":17}},{"source":"../node_modules/protobufjs/src/rpc.js","original":{"line":7,"column":0},"generated":{"line":1,"column":19}},{"source":"../node_modules/protobufjs/src/rpc.js","original":{"line":36,"column":0},"generated":{"line":1,"column":27}},{"source":"../node_modules/protobufjs/src/rpc.js","original":{"line":36,"column":0},"generated":{"line":1,"column":29}},{"source":"../node_modules/protobufjs/src/rpc.js","original":{"line":36,"column":0},"generated":{"line":1,"column":37}},{"source":"../node_modules/protobufjs/src/rpc.js","original":{"line":36,"column":0},"generated":{"line":1,"column":45}}],"sources":{"../node_modules/protobufjs/src/rpc.js":"\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n"},"lineCount":null}},"error":null,"hash":"1f6d101b5fb9a6e8c44e1e77b650836a","cacheData":{"env":{}}}