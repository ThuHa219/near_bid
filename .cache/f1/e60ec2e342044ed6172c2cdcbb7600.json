{"id":"../node_modules/aes256/index.js","dependencies":[{"name":"/Users/thuha/near_bid/package.json","includedInParent":true,"mtime":1693556262441},{"name":"/Users/thuha/near_bid/node_modules/aes256/package.json","includedInParent":true,"mtime":1693552840528},{"name":"crypto","loc":{"line":2,"column":21,"index":45},"parent":"/Users/thuha/near_bid/node_modules/aes256/index.js","resolved":"/Users/thuha/near_bid/node_modules/crypto-browserify/index.js"},{"name":"buffer","parent":"/Users/thuha/near_bid/node_modules/aes256/index.js","resolved":"/Users/thuha/near_bid/node_modules/node-libs-browser/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n// Node.js core modules\nvar crypto = require('crypto');\n\n\n/**\n * The encryption algorithm (cipher) type to be used.\n * @type {String}\n * @const\n * @private\n */\nvar CIPHER_ALGORITHM = 'aes-256-ctr';\n\n\n//\n// Primary API\n//\n\n/**\n * An API to allow for greatly simplified AES-256 encryption and decryption using a passphrase of\n * any length plus a random Initialization Vector.\n * @exports aes256\n * @public\n */\nvar aes256 = {\n\n  /**\n   * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String|Buffer} input  The clear-text message or buffer to be encrypted.\n   * @returns {String|Buffer} A custom-encrypted version of the input.\n   * @public\n   * @method\n   */\n  encrypt: function(key, input) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n\n    var isString = typeof input === 'string';\n    var isBuffer = Buffer.isBuffer(input);\n    if (!(isString || isBuffer) || (isString && !input) || (isBuffer && !Buffer.byteLength(input))) {\n      throw new TypeError('Provided \"input\" must be a non-empty string or buffer');\n    }\n\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key);\n\n    // Initialization Vector\n    var iv = crypto.randomBytes(16);\n    var cipher = crypto.createCipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n\n    var buffer = input;\n    if (isString) {\n      buffer = Buffer.from(input);\n    }\n\n    var ciphertext = cipher.update(buffer);\n    var encrypted = Buffer.concat([iv, ciphertext, cipher.final()]);\n\n    if (isString) {\n      encrypted = encrypted.toString('base64');\n    }\n\n    return encrypted;\n  },\n\n  /**\n   * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String|Buffer} encrypted  The encrypted message to be decrypted.\n   * @returns {String|Buffer} The original plain-text message or buffer.\n   * @public\n   * @method\n   */\n  decrypt: function(key, encrypted) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n\n    var isString = typeof encrypted === 'string';\n    var isBuffer = Buffer.isBuffer(encrypted);\n    if (!(isString || isBuffer) || (isString && !encrypted) || (isBuffer && !Buffer.byteLength(encrypted))) {\n      throw new TypeError('Provided \"encrypted\" must be a non-empty string or buffer');\n    }\n\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key);\n\n    var input = encrypted;\n    if (isString) {\n      input = Buffer.from(encrypted, 'base64');\n\n      if (input.length < 17) {\n        throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string or buffer');\n      }\n    } else {\n      if (Buffer.byteLength(encrypted) < 17) {\n        throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string or buffer');\n      }\n    }\n\n    // Initialization Vector\n    var iv = input.slice(0, 16);\n    var decipher = crypto.createDecipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n\n    var ciphertext = input.slice(16);\n\n    var output;\n    if (isString) {\n      output = decipher.update(ciphertext) + decipher.final();\n    } else {\n      output = Buffer.concat([decipher.update(ciphertext), decipher.final()]);\n    }\n\n    return output;\n  }\n\n};\n\n\n\n\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @public\n * @constructor\n */\nfunction AesCipher(key) {\n  if (typeof key !== 'string' || !key) {\n    throw new TypeError('Provided \"key\" must be a non-empty string');\n  }\n\n  /**\n   * A passphrase of any length to used to generate a symmetric session key.\n   * @member {String} key\n   * @readonly\n   */\n  Object.defineProperty(this, 'key', { value: key });\n\n}\n\n/**\n * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n * @param {String} plaintext  The clear-text message to be encrypted.\n * @returns {String} A custom-encrypted version of the input.\n * @public\n * @method\n */\nAesCipher.prototype.encrypt = function(plaintext) {\n  return aes256.encrypt(this.key, plaintext);\n};\n\n/**\n * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n * @param {String} encrypted  The encrypted message to be decrypted.\n * @returns {String} The original plain-text message.\n * @public\n * @method\n */\nAesCipher.prototype.decrypt = function(encrypted) {\n  return aes256.decrypt(this.key, encrypted);\n};\n\n\n\n\n//\n// API Extension\n//\n\n\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @returns {AesCipher}\n * @public\n * @method\n */\naes256.createCipher = function(key) {\n  return new AesCipher(key);\n};\n\n\n\n\n//\n// Export the API\n//\n\nmodule.exports = aes256;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/aes256/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/aes256/index.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}}],"sources":{"../node_modules/aes256/index.js":"// Node.js core modules\nvar crypto = require('crypto');\n\n\n/**\n * The encryption algorithm (cipher) type to be used.\n * @type {String}\n * @const\n * @private\n */\nvar CIPHER_ALGORITHM = 'aes-256-ctr';\n\n\n//\n// Primary API\n//\n\n/**\n * An API to allow for greatly simplified AES-256 encryption and decryption using a passphrase of\n * any length plus a random Initialization Vector.\n * @exports aes256\n * @public\n */\nvar aes256 = {\n\n  /**\n   * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String|Buffer} input  The clear-text message or buffer to be encrypted.\n   * @returns {String|Buffer} A custom-encrypted version of the input.\n   * @public\n   * @method\n   */\n  encrypt: function(key, input) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n\n    var isString = typeof input === 'string';\n    var isBuffer = Buffer.isBuffer(input);\n    if (!(isString || isBuffer) || (isString && !input) || (isBuffer && !Buffer.byteLength(input))) {\n      throw new TypeError('Provided \"input\" must be a non-empty string or buffer');\n    }\n\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key);\n\n    // Initialization Vector\n    var iv = crypto.randomBytes(16);\n    var cipher = crypto.createCipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n\n    var buffer = input;\n    if (isString) {\n      buffer = Buffer.from(input);\n    }\n\n    var ciphertext = cipher.update(buffer);\n    var encrypted = Buffer.concat([iv, ciphertext, cipher.final()]);\n\n    if (isString) {\n      encrypted = encrypted.toString('base64');\n    }\n\n    return encrypted;\n  },\n\n  /**\n   * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String|Buffer} encrypted  The encrypted message to be decrypted.\n   * @returns {String|Buffer} The original plain-text message or buffer.\n   * @public\n   * @method\n   */\n  decrypt: function(key, encrypted) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n\n    var isString = typeof encrypted === 'string';\n    var isBuffer = Buffer.isBuffer(encrypted);\n    if (!(isString || isBuffer) || (isString && !encrypted) || (isBuffer && !Buffer.byteLength(encrypted))) {\n      throw new TypeError('Provided \"encrypted\" must be a non-empty string or buffer');\n    }\n\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key);\n\n    var input = encrypted;\n    if (isString) {\n      input = Buffer.from(encrypted, 'base64');\n\n      if (input.length < 17) {\n        throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string or buffer');\n      }\n    } else {\n      if (Buffer.byteLength(encrypted) < 17) {\n        throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string or buffer');\n      }\n    }\n\n    // Initialization Vector\n    var iv = input.slice(0, 16);\n    var decipher = crypto.createDecipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n\n    var ciphertext = input.slice(16);\n\n    var output;\n    if (isString) {\n      output = decipher.update(ciphertext) + decipher.final();\n    } else {\n      output = Buffer.concat([decipher.update(ciphertext), decipher.final()]);\n    }\n\n    return output;\n  }\n\n};\n\n\n\n\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @public\n * @constructor\n */\nfunction AesCipher(key) {\n  if (typeof key !== 'string' || !key) {\n    throw new TypeError('Provided \"key\" must be a non-empty string');\n  }\n\n  /**\n   * A passphrase of any length to used to generate a symmetric session key.\n   * @member {String} key\n   * @readonly\n   */\n  Object.defineProperty(this, 'key', { value: key });\n\n}\n\n/**\n * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n * @param {String} plaintext  The clear-text message to be encrypted.\n * @returns {String} A custom-encrypted version of the input.\n * @public\n * @method\n */\nAesCipher.prototype.encrypt = function(plaintext) {\n  return aes256.encrypt(this.key, plaintext);\n};\n\n/**\n * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n * @param {String} encrypted  The encrypted message to be decrypted.\n * @returns {String} The original plain-text message.\n * @public\n * @method\n */\nAesCipher.prototype.decrypt = function(encrypted) {\n  return aes256.decrypt(this.key, encrypted);\n};\n\n\n\n\n//\n// API Extension\n//\n\n\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @returns {AesCipher}\n * @public\n * @method\n */\naes256.createCipher = function(key) {\n  return new AesCipher(key);\n};\n\n\n\n\n//\n// Export the API\n//\n\nmodule.exports = aes256;\n"},"lineCount":193}},"error":null,"hash":"e09e035e515d5eb78493c0e7711b37ce","cacheData":{"env":{}}}